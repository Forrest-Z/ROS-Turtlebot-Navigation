/// \file
/// \brief
///
/// \author Boston Cleek
/// \date 2/27/20
///
/// PUBLISHES:
///
/// SUBSCRIBES:
///
/// SERVICES:

#include <ros/ros.h>
#include <ros/console.h>
#include <sensor_msgs/LaserScan.h>

#include <iostream>

#include <rigid2d/rigid2d.hpp>
#include "nuslam/landmarks.hpp"

using nuslam::LaserProperties;
using nuslam::Landmarks;

using rigid2d::Vector2D;
using rigid2d::deg2rad;


static std::vector<float> ranges;
static bool scan_update;



void scanCallback(const sensor_msgs::LaserScan::ConstPtr &msg)
{


}



int main(int argc, char** argv)
{
  ros::init(argc, argv, "landmarks");
  ros::NodeHandle nh("~");
  ros::NodeHandle node_handle;

  ros::Subscriber scan_sub = node_handle.subscribe("scan", 1, scanCallback);


  // lidar properties
  double beam_min = 0.12, beam_max = deg2rad(360.0);
  double beam_delta = deg2rad(0.0);
  double range_min = 0.12, range_max = 3.5;

  LaserProperties props(beam_min, beam_max, beam_delta, range_min, range_max);


  // landmark classifier
  double epsilon = 0.05;
  Landmarks landmarks(props, epsilon);


  std::vector<float> scan = {1.8889458179473877, 1.8679625988006592, 1.891318440437317, 1.8817356824874878, 1.869554877281189, 1.8845105171203613, 1.8758052587509155, 1.8858327865600586, 1.9085675477981567, 1.9143092632293701, 1.9150539636611938, 1.9172111749649048, 1.9281632900238037, 1.911747932434082, 1.9310389757156372, 1.9434268474578857, 1.9445295333862305, 1.964593768119812, 1.9936800003051758, 1.9970277547836304, 1.9999291896820068, 2.015897512435913, 2.0137460231781006, 2.0488407611846924, 2.0678915977478027, 2.0788769721984863, 2.087015390396118, 2.113121509552002, 2.1267969608306885, 2.1576480865478516, 2.1737911701202393, 2.1901981830596924, 2.206765651702881, 2.25015926361084, 0.812997043132782, 0.7823804020881653, 0.7710292339324951, 0.7420703768730164, 0.7420719265937805, 0.7606738209724426, 0.7207374572753906, 0.7278792262077332, 0.7334129810333252, 0.728752613067627, 0.7380678057670593, 0.7137352824211121, 0.7276677489280701, 0.7281997799873352, 0.7368583679199219, 0.7380355000495911, 0.7498629093170166, 0.7644044756889343, 0.784085750579834, 0.8230465054512024, 2.273183822631836, 2.253618001937866, 2.2237160205841064, 2.2175495624542236, 2.1828536987304688, 2.1512279510498047, 2.115846872329712, 2.0872676372528076, 2.1130197048187256, 2.06156849861145, 2.058133602142334, 2.0322439670562744, 2.023160457611084, 2.009486675262451, 2.000826597213745, 1.984031319618225, 1.9734203815460205, 1.9556429386138916, 1.934736728668213, 1.9311376810073853, 1.920821189880371, 1.8973625898361206, 1.9019486904144287, 1.8933614492416382, 1.8956472873687744, 1.8977302312850952, 1.8848605155944824, 1.8710603713989258, 1.863314151763916, 1.8483130931854248, 1.8702006340026855, 1.8430650234222412, 1.8653193712234497, 1.8606408834457397, 1.8477619886398315, 1.8402252197265625, 1.838742971420288, 1.8372536897659302, 1.8532477617263794, 1.8323869705200195, 1.876692533493042, 1.8562308549880981, 1.8635917901992798, 1.8576693534851074, 1.8735915422439575, 1.8639912605285645, 1.8753718137741089, 1.8771482706069946, 1.890128254890442, 1.9120750427246094, 1.9194046258926392, 1.9207231998443604, 1.9241780042648315, 1.9324496984481812, 1.9448634386062622, 1.9907960891723633, 1.9553532600402832, 1.9875967502593994, 1.996411919593811, 2.006467819213867, 2.037776231765747, 2.0517044067382812, 2.0666167736053467, 2.085763931274414, 2.1080574989318848, 2.129157781600952, 2.1304993629455566, 2.160552740097046, 2.2013187408447266, 0.783623218536377, 0.7542464733123779, 0.7211725115776062, 0.7263370752334595, 0.6999678015708923, 0.6816991567611694, 0.6860052347183228, 0.6984398365020752, 0.6713692545890808, 0.6888083219528198, 0.6669104695320129, 0.6734787225723267, 0.6757830381393433, 0.6469650864601135, 0.6830650568008423, 0.6963819265365601, 0.697182297706604, 0.7038620710372925, 0.7446343898773193, 0.7299690246582031, 0.7799328565597534, 2.2274961471557617, 2.2387759685516357, 2.18742299079895, 2.1627085208892822, 2.1425957679748535, 2.118159770965576, 2.076655626296997, 2.0844027996063232, 2.069195032119751, 2.0288171768188477, 2.022308349609375, 1.9995390176773071, 2.009929656982422, 1.9724160432815552, 1.9544992446899414, 1.946028470993042, 1.9410624504089355, 1.9102979898452759, 1.9277933835983276, 1.898762822151184, 1.8896288871765137, 1.8840620517730713, 1.8745373487472534, 1.8678964376449585, 1.8766525983810425, 1.8516119718551636, 1.84394371509552, 1.8393551111221313, 1.8346624374389648, 1.8395143747329712, 1.833878993988037, 1.8236593008041382, 1.817613124847412, 1.8210331201553345, 1.8146597146987915, 1.8212945461273193, 1.8323817253112793, 1.8228389024734497, 1.8267301321029663, 1.8099009990692139, 1.838545322418213, 1.8259410858154297, 1.8249733448028564, 1.8262395858764648, 1.8460135459899902, 1.8438040018081665, 1.8549867868423462, 1.8477387428283691, 1.8673144578933716, 1.8712443113327026, 1.880507469177246, 1.8921809196472168, 1.916525959968567, 1.9069602489471436, 1.9281280040740967, 1.9263193607330322, 1.9468069076538086, 1.959099531173706, 1.971849799156189, 1.9956376552581787, 2.004195213317871, 2.011039972305298, 2.0217623710632324, 2.0608866214752197, 2.0651769638061523, 2.101435661315918, 2.1058509349823, 2.1346933841705322, 2.156698703765869, 2.189795732498169, 2.2119507789611816, 2.2419135570526123, 0.7773227691650391, 0.7371006608009338, 0.7099062204360962, 0.6930346488952637, 0.6921401023864746, 0.6904165148735046, 0.6853212118148804, 0.6765950322151184, 0.691247284412384, 0.6690188050270081, 0.6757097244262695, 0.6855843663215637, 0.67975914478302, 0.6823750138282776, 0.6772998571395874, 0.6909137964248657, 0.6864780783653259, 0.7097047567367554, 0.7214122414588928, 0.7445669770240784, 0.7776743769645691, 2.1988492012023926, 2.1636393070220947, 2.1396732330322266, 2.1249711513519287, 2.085864305496216, 2.087977647781372, 2.0608890056610107, 2.0545713901519775, 2.0232131481170654, 2.0144150257110596, 2.007166624069214, 1.990112066268921, 1.9898581504821777, 1.962609052658081, 1.9446306228637695, 1.9501523971557617, 1.9204320907592773, 1.9107396602630615, 1.9082367420196533, 1.900998830795288, 1.8850078582763672, 1.885782241821289, 1.8695337772369385, 1.882907748222351, 1.886408805847168, 1.8718645572662354, 1.8791037797927856, 1.859122395515442, 1.8629264831542969, 1.8529796600341797, 1.8403699398040771, 1.8672300577163696, 1.8476468324661255, 1.8731011152267456, 1.8504348993301392, 1.857951045036316, 1.8611212968826294, 1.8580090999603271, 1.8600597381591797, 1.8608835935592651, 1.8728853464126587, 1.8636119365692139, 1.8585973978042603, 1.8752871751785278, 1.876267910003662, 1.8934757709503174, 1.910245418548584, 1.9257845878601074, 1.9247020483016968, 1.933510422706604, 1.9500136375427246, 1.946671962738037, 1.9626755714416504, 1.9683923721313477, 2.01667857170105, 1.998589038848877, 2.0184876918792725, 2.0394020080566406, 2.0495245456695557, 2.0626771450042725, 2.108510732650757, 2.1183416843414307, 2.134223699569702, 2.1602890491485596, 2.173978805541992, 2.1722028255462646, 2.223459005355835, 2.2415130138397217, 2.2735159397125244, 0.8309259414672852, 0.7759415507316589, 0.75872802734375, 0.7472547888755798, 0.732140064239502, 0.72948157787323, 0.7191747426986694, 0.7030531167984009, 0.6983692049980164, 0.7098954916000366, 0.6954676508903503, 0.7207724452018738, 0.7138162851333618, 0.7267610430717468, 0.7316877841949463, 0.7521381378173828, 0.7609111070632935, 0.7623441815376282, 0.7761427164077759, 0.8187769651412964, 2.256387710571289, 2.2193641662597656, 2.213879108428955, 2.162872314453125, 2.1632893085479736, 2.1463534832000732, 2.116060256958008, 2.0903244018554688, 2.0672194957733154, 2.064692497253418, 2.064892530441284, 2.031372547149658, 1.9923467636108398, 2.0237958431243896, 1.9931334257125854, 1.9635483026504517, 1.9661197662353516, 1.958613395690918, 1.9240738153457642, 1.9465993642807007, 1.9316984415054321, 1.9058135747909546, 1.9070539474487305, 1.899666428565979, 1.890357255935669, 1.8978750705718994, 1.8915165662765503, 1.8862035274505615, 1.8877997398376465, 1.8865615129470825, 1.8742167949676514, 1.876779317855835, 1.8722752332687378, 1.8582954406738281};


  landmarks.featureDetection(scan);
  for(unsigned int i = 0; i < landmarks.lm.size(); i++)
  {
    std::cout << "radius: " << landmarks.lm.at(i).radius <<
                 " cx: " << landmarks.lm.at(i).x_hat <<
                 " cy: " << landmarks.lm.at(i).y_hat << std::endl;
  }




  // std::vector<Vector2D> end_points;
  // landmarks.laserEndPoints(end_points, scan);
  //
  // // std::cout << end_points.at(0);
  // // std::cout << end_points.at(1);
  // // landmarks.clusterScan(end_points);
  //
  //
  // landmarks.generateClusters(scan);
  //
  // // std::cout << landmarks.lm.size() << std::endl;
  //
  // int lm = 1;
  //
  // landmarks.centroid(landmarks.lm.at(lm));
  // landmarks.shiftCentroidToOrigin(landmarks.lm.at(lm));
  //
  //
  // // std::cout << landmarks.lm.at(lm).points.size() << std::endl;
  // //
  // // std::cout << landmarks.lm.at(lm).x_hat << " " << landmarks.lm.at(lm).y_hat << std::endl;
  // //
  // //
  // // std::cout << landmarks.lm.at(lm).x_bar << std::endl;
  // // std::cout << landmarks.lm.at(lm).y_bar << std::endl;
  // // std::cout << landmarks.lm.at(lm).z_bar << std::endl;
  //
  //
  // landmarks.composeCircle(landmarks.lm.at(lm));


  // Vector2D v1(1.0, 7.0);
  // Vector2D v2(2.0, 6.0);
  // Vector2D v3(5.0, 8.0);
  // Vector2D v4(7.0, 7.0);
  // Vector2D v5(9.0, 5.0);
  // Vector2D v6(3.0, 7.0);
  //
  // nuslam::Cluster cluster;
  // cluster.points.push_back(v1);
  // cluster.points.push_back(v2);
  // cluster.points.push_back(v3);
  // cluster.points.push_back(v4);
  // cluster.points.push_back(v5);
  // cluster.points.push_back(v6);


//   Vector2D v1(-1.0, 0.0);
//   Vector2D v2(-0.3, -0.06);
//   Vector2D v3(0.3, 0.1);
//   Vector2D v4(1.0, 0.0);
//
//   nuslam::Cluster cluster;
//   cluster.points.push_back(v1);
//   cluster.points.push_back(v2);
//   cluster.points.push_back(v3);
//   cluster.points.push_back(v4);
//
//
// //4.61548 2.80735 4.82758
// //4.67434 3.27476 4.6497
//
//
//
//   landmarks.centroid(cluster);
//   landmarks.shiftCentroidToOrigin(cluster);
//   landmarks.composeCircle(cluster);
//
//
//   std::cout << cluster.x_hat << " " << cluster.y_hat << " " << cluster.radius << std::endl;




  return 0;
}









// end file
